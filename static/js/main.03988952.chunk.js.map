{"version":3,"sources":["Components/Brick/Brick.js","Components/Wall/wall.js","App.js","serviceWorker.js","index.js"],"names":["Brick","props","onClick","number","className","Wall","addBrick","newBricks","state","bricks","push","length","setState","delBrick","pop","clrBrick","onBrickClick","window","alert","render","map","num","React","Component","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAaeA,G,MATD,SAACC,GACb,OACE,yBAAKC,QAAS,kBAAMD,EAAMC,QAAQD,EAAME,SACtBC,UAAU,SAC1B,8BAAOH,EAAME,WCkFJE,G,wDAnFb,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IAMRK,SAAW,WAET,IAAMC,EAAS,YAAO,EAAKC,MAAMC,QAGjCF,EAAUG,KAAKH,EAAUI,OAAS,GAGlC,EAAKC,SAAS,CACZH,OAAQF,KAhBO,EAoBnBM,SAAW,WAET,IAAMN,EAAS,YAAO,EAAKC,MAAMC,QAGjCF,EAAUO,IAAIP,GAGd,EAAKK,SAAS,CACZH,OAAQF,KA7BO,EAiCnBQ,SAAW,WAKT,EAAKH,SAAS,CACZH,OAJgB,MAnCD,EA4CnBO,aAAe,SAACb,GACdc,OAAOC,MAAM,qBAAuBf,IA7CnB,EAiDnBgB,OAAS,WACP,OACE,yBAAKf,UAAU,kBACZ,EAAKI,MAAMC,OAAOW,KAAI,SAACC,GACtB,OAAO,kBAAC,EAAD,CAAOnB,QACX,EAAKc,aAAab,OAAQkB,OAG/B,yBAAKjB,UAAU,eACb,4BAAQF,QAAS,EAAKI,SACVF,UAAU,WADtB,MAMF,yBAAKA,UAAU,eACb,4BAAQF,QAAS,EAAKW,SACVT,UAAU,WADtB,MAMF,yBAAKA,UAAU,eACb,4BAAQF,QAAS,EAAKa,SACVX,UAAU,WADtB,gBAtEN,EAAKI,MAAQ,CACXC,OAAQ,IAHO,E,UADFa,IAAMC,Y,MCIVC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASV,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03988952.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst Brick = (props) => {\r\n  return (\r\n    <div onClick={() => props.onClick(props.number)} \r\n                      className=\"brick\">\r\n      <span>{props.number}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Brick;","import React from \"react\";\r\n\r\nimport Brick from \"../Brick/Brick.js\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass Wall extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bricks: [] // initial bricks to display\r\n    };\r\n  }\r\n\r\n  addBrick = () => {\r\n    //  first copying the old data\r\n    const newBricks = [...this.state.bricks];\r\n\r\n    //  adding new data to previously copied data\r\n    newBricks.push(newBricks.length + 1);\r\n\r\n    //  updating the view using setState\r\n    this.setState({\r\n      bricks: newBricks\r\n    });\r\n  };\r\n\r\n  delBrick = () => {\r\n    //  first copying the old data\r\n    const newBricks = [...this.state.bricks];\r\n\r\n    //  deleting the last data\r\n    newBricks.pop(newBricks);\r\n\r\n    //  updating the view using setState\r\n    this.setState({\r\n      bricks: newBricks\r\n    });\r\n  };\r\n\r\n  clrBrick = () => {\r\n    //  resetting the array\r\n    const newBricks = [];\r\n\r\n    //  updating the view using setState\r\n    this.setState({\r\n      bricks: newBricks\r\n    });\r\n  };\r\n\r\n  //  executed when the user clicks on a brick\r\n  onBrickClick = (number) => {\r\n    window.alert(\"This is Brick no: \" + number);\r\n  };\r\n\r\n  //  render function returns what to display to the user\r\n  render = () => {\r\n    return (\r\n      <div className=\"wall-container\">\r\n        {this.state.bricks.map((num) => {\r\n          return <Brick onClick=\r\n            {this.onBrickClick}number={num} />;\r\n        })}\r\n\r\n        <div className=\"add-btn-box\">\r\n          <button onClick={this.addBrick} \r\n                      className=\"add-btn\">\r\n                        +                             \r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"del-btn-box\">\r\n          <button onClick={this.delBrick} \r\n                      className=\"del-btn\">\r\n                        -                             \r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"clr-btn-box\">\r\n          <button onClick={this.clrBrick} \r\n                      className=\"clr-btn\">\r\n                        Clear All                             \r\n          </button>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Wall;","import React from 'react';\nimport Wall from './Components/Wall/wall.js'\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Wall/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}